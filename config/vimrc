""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Install vim-plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source ~/.vim/vimrc
endif

" Use plugins
call plug#begin('~/.vim/plugged') " vim-plug start
Plug 'morhetz/gruvbox' " colorscheme
Plug 'terryma/vim-multiple-cursors' " sublime-like multiple cursors
Plug 'jiangmiao/auto-pairs' " quotes, parens, brackets
Plug 'w0rp/ale' " auto-linting
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fuzzy file finder/opener
Plug 'junegunn/fzf.vim' " fuzzy file finder/opener
call plug#end() " vim-plug end

" morhetz/gruvbox
set background=dark " choose between dark/light theme
colorscheme gruvbox " set colorscheme

" w0rp/ale
let g:ale_linters = {
  \ 'cpp': ['cpplint', 'cppcheck'],
  \ 'py': ['flake8'],
  \ 'javascript': ['eslint'],
  \ }

" junegunn/fzf
let $FZF_DEFAULT_COMMAND = 'ag -g ""' " ignore gitignored files
nnoremap <c-f> :FZF<cr> " open with ctrl-f


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DEFAULT FILE SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn on line numbers
set number

" Show lines that wrap to multiple lines, even if they don't fully fit on the
"   page
set display+=lastline

" Define a tab as 2 spaces
setlocal tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab

" Highlight search terms with specified color options
set hlsearch
noh

" Begin showing search matches as soon as any characters are typed into a
"   search command
set incsearch

" Searches are only case sensitive if they contain a capital letter
set ignorecase
set smartcase

" Define contents of the statusline
"   <RELATIVE_FILE_PATH> - L:<LINE_NUMBER> C:<COLUMN_NUMBER>
set statusline=%f\ -\ %l\ %c

" Always show the statusline
set laststatus=2

" Set the colors of the statusline
hi statusline ctermbg=255 ctermfg=240

" Stop vim from making a .netrwhist file
let g:netrw_dirhistmax = 0

" Make the vsp command open the new file on the right of the current file
set splitright


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" .js FILE SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Define a tab as 2 spaces
autocmd FileType javascript setlocal tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" .vimrc FILE SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Define a tab as 2 spaces
autocmd FileType vim setlocal tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEY REMAPPINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" No idea
" -remapped to-
" Source vimrc
nmap gs :source ~/.vim/vimrc<CR>

" Move the cursor up/down real lines
" -remapped to-
" Move the cursor up/down perceived lines (eg. if a long line wraps into two
"   lines, then it will now take two cursor movements to traverse it)
map j gj
map k gk

" Move the cursor up/down
" -remapped to-
" Move the cursor up/down and move the screen down/up to keep the cursor in the
"   same relative position
map J j<C-E>
map K k<C-Y>

" Move to the next/previous empty line
" -remapped to-
" Move to the next/previous empty line and center the screen around it
nnoremap { {zz
nnoremap } }zz

" Move the cursor to the next matching search term
" -remapped to-
" Move the cursor to the next matching search term and center the screen around
"   it
nnoremap n nzz
nnoremap N Nzz

" No idea
" -remapped to-
" Clear the highlighting after a search
nmap H :noh<CR>

" No idea
" -remapped to-
" Replace every local instance of the currently hovered over word with the next
"   typed word
nnoremap gr viwy[{V%::s/\<<C-R>"\>//g<left><left>

" No idea
" -remapped to-
" Replace every instance of the currently hovered over word with the next
"   typed word
nnoremap gR viwy:%s/\<<C-R>"\>//g<left><left>

" No idea
" -remapped to-
" Replace every local instance of the currently highlighted text with the next
"   typed word
vnoremap gr y[{V%::s/\<<C-R>"\>//g<left><left>

" No idea
" -remapped to-
" Replace every instance of the currently highlighted text with the next
"   typed word
vnoremap gR y:%s/\<<C-R>"\>//g<left><left>

" No idea
" -remapped to-
" Switch windows
nmap gw <C-W>w

" Make a new line below the current line, move to it, and enter insert mode
" -remapped to-
" Make a new line below the current line, move to it, and stay in normal mode
nmap o o<Esc>

" Make a new line above the current line, move to it, and enter insert mode
" -remapped to-
" Make a new line above the current line, move to it, and stay in normal mode
nmap O O<Esc>

" In-line character search backwards
" -remapped to'
" Change tabs forwards
nmap t gt

" In-line character search forwards
" -remapped to'
" Change tabs backwards
nmap T gT

" Move cursor to given line number
" -remapped to-
" Move cursor to given line number and center screen
nnoremap gg ggzz

" Move cursor to end of file
" -remapped to-
" Move cursor to end of file and move screen so cursor is at the bottom
nnoremap G Gzb

" No idea
" -remapped to-
" Move the cursor to different splits
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>
nmap <C-H> <C-W><C-H>
nmap <C-L> <C-W><C-L>

" Move cursor up/down half a screen
" -remapped to-
" Move cursor up/down half a screen and center the screen around the cursor
nnoremap <C-D> <C-D>zz
nnoremap <C-U> <C-U>zz

" No idea
" -remapped to-
" Call ResolveGitConflictsCurrentFile()
nmap gc :call ResolveGitConflictsCurrentFile()<Enter>

" No idea
" -remapped to-
" Call ResolveGitConflictsAllFiles()
nmap gC :call ResolveGitConflictsAllFiles()<Enter>

" No idea
" -remapped to-
" Go to the next linter error
nmap <C-L> :ALENext<Enter>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FUNCTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Search for Git conflict tags, navigate to them, interactively ask the user
" how the conflict should be resolved, and edit the file appropriately. Continue
" searching for Git conflicts until they are all resolved.
function! ResolveGitConflictsCurrentFile()
  let nextConflictLineNumber = 1
  let goToNextConflict = 1
  let quit = 0

  while !quit
    if goToNextConflict
      " Find the beginning of a git conflict
      let nextConflictLineNumber = search("<<<<<<<")
      if nextConflictLineNumber == 0
        break
      endif
      " Move the cursor to the first line of the git conflict
      call cursor(nextConflictLineNumber, 1)
      normal zt
      redraw
    endif

    " Prompt user for input
    echo "Fix Git conflict (k/j/n/q/?)? "
    " Get the next character the user types
    let userInput = nr2char(getchar())
    if userInput == "k"
      execute "normal! dd/=======\<cr>V/>>>>>>>\<cr>dk:noh"
      redraw
      let goToNextConflict = 1
    elseif userInput == "j"
      execute "normal! V/=======\<cr>d/>>>>>>>\<cr>ddk:noh"
      redraw
      let goToNextConflict = 1
    elseif userInput == "n"
      let goToNextConflict = 1
    elseif userInput == "q"
      let quit = 1
    elseif userInput == "?"
      let k = "k - keep the top version\n"
      let j = "j - keep the bottom version\n"
      let n = "n - move to the next conflict\n"
      let q = "q - quit\n"
      let questionMark = "? - display this help menu"
      echo k . j . n . q . questionMark
      let goToNextConflict = 0
    else
      redraw
      echo "Invalid character. Valid characters are: (k/j/n/q/?)"
      let goToNextConflict = 0
    endif
  endwhile

  if quit
    echo "Some Git conflicts remain!"
  else
    execute "w"
    echo "All Git conflicts are resolved! File saved."
  endif
  let makeUserPressButton = getchar()
  redraw
endfunction

function! ResolveGitConflictsAllFiles()
  let filesWithConflictsStr = system("git diff --name-only --diff-filter=U")
  let newLineChar = nr2char(10)
  let filesWithConflicts = split(filesWithConflictsStr, newLineChar)
  for file in filesWithConflicts
    execute "e " . file
    call ResolveGitConflictsCurrentFile()
  endfor
endfunction

" Make it a lot easier to write text
function! WordProcessorMode()
  if( &spell == 1)
    setlocal nospell
    setlocal nolinebreak
  else
    setlocal spell spelllang=en_us
    setlocal wrap
    setlocal linebreak
  endif
endfunction
com! WP call WordProcessorMode()
